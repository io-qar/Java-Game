package entity;

import entity.item.HealthPotion;
import entity.item.PokeBall;
import entity.item.Revive;
import entity.location.GymLocation;
import entity.location.ItemLocation;
import entity.location.Location;
import entity.location.PokemonLocation;

import java.util.ArrayList;
import java.util.List;

public class Map {
    /**
     * A number of locations on the X axis (columns)
     */
    int width;

    /**
     * A number of locations on the Y axis (rows)
     */
    int height;

    int currentX;
    int currentY;
    List<List<Location>> locations;

    public Map(int height, int width) {
        this.width = width;
        this.height = height;
        this.locations = new ArrayList<>();
        this.currentX = -1; // keeps track of x coordinate for new locations to be added, initialize as -1
        this.currentY = -1; // keeps track of y coordinate for new locations to be added, initialize as -1

        // create empty 2D array for locations
        for (int row = 0; row < height; row++) {
            List<Location> newRow = new ArrayList<>();
            for (int col = 0; col < width; col++) {
                newRow.add(null);
            }
            locations.add(newRow);
        }

        // add new locations here.
        // location descriptions were generated by ChatGPT.
        Location palletTown = new Location("PalletTown", "You're at the tranquil outskirts of Pallet Town, a serene place where the breeze carries the scent of the nearby sea, and new trainers start their Pokémon journey.");
        addLocation(palletTown);

        Pokemon pidgey = new Pokemon("Pidgey", 10, 2);
        Location route3 = new PokemonLocation( "Route3", "The skies above Route 3 teem with winged Pokémon, where Flying-types rule the air currents, creating a mesmerizing spectacle of soaring creatures and sweeping vistas.", pidgey);
        addLocation(route3);

        HealthPotion potion = new HealthPotion("small potion", 5);
        Location cave = new ItemLocation( "CeruleanCave", "Deep within Cerulean Cave, darkness envelops everything except for the eerie glow emanating from rare crystals, creating an otherworldly atmosphere within its depths.", potion);
        addLocation(cave);

        Pokemon caterpie = new Pokemon("Caterpie", 12, 1);
        Location forest = new PokemonLocation( "ViridianForest", "You find yourself surrounded by towering trees, their leaves dappled in sunlight, as the gentle hum of Bug-type Pokémon fills the air.", caterpie);
        addLocation(forest);

        Revive revive = new Revive("revive");
        ItemLocation garden = new ItemLocation( "EternalGarden", "The Eternal Garden exudes tranquility with its blooming flora and trickling streams, a serene oasis that invites exploration amidst its serene and verdant surroundings.", revive);
        addLocation(garden);

        HealthPotion potion2 = new HealthPotion("big potion", 10);
        Location caverns = new ItemLocation( "CrystalCaverns", "Deep within the Crystal Caverns, refracted light dances off the walls, illuminating the labyrinthine paths and revealing dazzling formations that seem to hold untold stories.", potion2);
        addLocation(caverns);

        PokeBall pokeball = new PokeBall("pokeball", 0.5);
        ItemLocation ancientRuins = new ItemLocation( "AncientRuins", "The Ancient Ruins stand as a testament to a bygone era, shrouded in mystery and surrounded by whispers of legendary Pokémon sightings.", pokeball);
        addLocation(ancientRuins);

        Pokemon onyx = new Pokemon("onyx", 20, 3);
        Location gym = new GymLocation("Gym", "Located in Pewter City, this Gym is famous for its solid rock defenses and is led by Brock, the Rock-type Pokémon Gym Leader.", "Brock", onyx);
        addLocation(gym);

        PokeBall masterball = new PokeBall("masterball", 1);
        ItemLocation sereneLake = new ItemLocation("SereneLake", "Nestled amidst lush greenery, Serene Lake reflects the azure sky and offers a tranquil ambiance for reflection and relaxation.", masterball);
        addLocation(sereneLake);
    }

    public int getHeight() {
        return height;
    }

    public int getWidth() {
        return width;
    }

    public Location getLocation(int y, int x) {
        return locations.get(y).get(x);
    }

    private void addLocation(Location loc) {
        calculateCoordinates();
        locations.get(currentY).set(currentX, loc);
    }

    private void calculateCoordinates() {
        if (currentX == -1 && currentY == -1) {
            // first location
            currentX = 0;
            currentY = 0;
        } else if (currentX < width - 1 && currentY <= height - 1) {
            // move up one column in current row
            currentX++;
        } else if (currentX == width - 1 && currentY <= height - 1) {
            // go to new row
            currentX = 0;
            currentY++;
        } else {
            // reached max map size
            throw new ArrayIndexOutOfBoundsException("Exceeded map size");
        }
    }
}
